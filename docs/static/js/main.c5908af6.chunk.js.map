{"version":3,"sources":["Components/AddCategories.js","helpers/getGif.js","Components/GifGridItem.js","Components/GifGrid.js","hooks/useFetchGif.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategories","setCategories","useState","value","setValue","handleSubmit","e","preventDefault","trim","length","cat","className","onSubmit","type","onChange","target","placeholder","autoComplete","onClick","getGif","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","title","id","images","downsized","GifGridItem","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGif","console","log","GifExpertApp","Categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"yMAsCeA,EAnCO,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACvB,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAMMC,EAAe,SAACC,GACpBA,EAAEC,iBACEJ,EAAMK,OAAOC,OAAS,IACxBR,GAAc,SAACS,GAAD,OAAUP,GAAV,mBAAoBO,OAClCN,EAAS,MAGb,OACE,qBAAKO,UAAU,QAAf,SACE,uBAAMC,SAAUP,EAAhB,UACE,uBACEQ,KAAK,OACLC,SAhBY,SAACR,GACnBF,EAASE,EAAES,OAAOZ,QAgBZA,MAAOA,EACPa,YAAY,gCACZC,aAAa,QAEf,uBACEN,UAAU,SACVE,KAAK,SACLV,MAAM,eACNe,QAASb,U,+BCfJc,EAhBH,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACPC,EADO,iDACyCC,UACpDH,GAFW,+DAIMI,MAAMF,GAJZ,cAIPG,EAJO,gBAKUA,EAAKC,OALf,uBAKLC,EALK,EAKLA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GACrB,MAAO,CACLC,MAAOD,EAAIC,MACXC,GAAIF,EAAIE,GACRF,IAAKA,EAAIG,OAAOC,UAAUZ,QAVjB,kBAaNM,GAbM,4CAAH,sDCACO,EAAc,SAAC,GAAoB,IAAlBL,EAAiB,EAAjBA,IAAKC,EAAY,EAAZA,MACjC,OACE,qBAAKpB,UAAU,uBAAf,SACE,qBAAKyB,IAAKN,EAAKO,IAAKN,OCgBXO,EAhBC,SAAC,GAAkB,IACjC,ECDyB,SAAClB,GAC1B,MAA0BlB,mBAAS,CAAEyB,KAAM,GAAIY,SAAS,IAAxD,mBAAOC,EAAP,KAAcC,EAAd,KAWA,OATAC,qBAAU,WACRvB,EAAOC,GAAUuB,MAAK,SAACC,GACrBH,EAAS,CACPd,KAAMiB,EACNL,SAAS,SAGZ,CAACnB,IAEGoB,EDXmBK,CADM,EAAfzB,UACTO,EAAR,EAAQA,KAAMY,EAAd,EAAcA,QAGd,OAFAO,QAAQC,IAAIR,GAGV,qCACGA,GAAW,oBAAI5B,UAAU,oBAAd,mCACZ,qBAAKA,UAAU,OAAf,SACGgB,EAAKE,KAAI,SAACC,GAAD,OACR,cAAC,EAAD,eAA8BA,GAAZA,EAAIE,aEOjBgB,EAfM,WACnB,MAAoC9C,mBAAS,IAA7C,mBAAO+C,EAAP,KAAmBhD,EAAnB,KACA,OACE,qCACE,sBAAKU,UAAU,SAAf,UACE,sEACA,cAAC,EAAD,CAAeV,cAAeA,OAE/BgD,EAAWpB,KAAI,SAACvB,GAAD,OACd,cAAC,EAAD,CAASc,SAAUd,GAAQA,UCDpB4C,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCDdO,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,SAK1DX,M","file":"static/js/main.c5908af6.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategories = ({ setCategories }) => {\r\n  const [value, setValue] = useState('');\r\n\r\n  const changeValue = (e) => {\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (value.trim().length > 0) {\r\n      setCategories((cat) => [value, ...cat]);\r\n      setValue('');\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"input\">\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          onChange={changeValue}\r\n          value={value}\r\n          placeholder=\"Hola fea, busca algo ahi pues\"\r\n          autoComplete=\"off\"\r\n        />\r\n        <input\r\n          className=\"botton\"\r\n          type=\"submit\"\r\n          value=\"üîé\"\r\n          onClick={handleSubmit}\r\n        ></input>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddCategories;\r\n\r\nAddCategories.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","const getGif = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category\r\n  )}&limit=10&api_key=Z6yqBfjr6SkMy0CjFcwoExMSj5TkISAC`;\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      title: img.title,\r\n      id: img.id,\r\n      img: img.images.downsized.url,\r\n    };\r\n  });\r\n  return gifs;\r\n};\r\n\r\nexport default getGif;\r\n","export const GifGridItem = ({ img, title }) => {\r\n  return (\r\n    <div className=\"card animate__zoomIn\">\r\n      <img src={img} alt={title} />\r\n    </div>\r\n  );\r\n};\r\n","import { useFetchGif } from '../hooks/useFetchGif';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nconst GifGrid = ({ category }) => {\r\n  const { data, loading } = useFetchGif(category);\r\n  console.log(loading);\r\n\r\n  return (\r\n    <>\r\n      {loading && <h1 className=\"animate__bounceIn\"> Marico el que lo lea</h1>}\r\n      <div className=\"grid\">\r\n        {data.map((img) => (\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifGrid;\r\n","import { useEffect, useState } from 'react';\r\nimport getGif from '../helpers/getGif';\r\n\r\nexport const useFetchGif = (category) => {\r\n  const [state, setState] = useState({ data: [], loading: true });\r\n\r\n  useEffect(() => {\r\n    getGif(category).then((imgs) => {\r\n      setState({\r\n        data: imgs,\r\n        loading: false,\r\n      });\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from 'react';\r\nimport AddCategories from './Components/AddCategories';\r\nimport GifGrid from './Components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n  const [Categories, setCategories] = useState([]);\r\n  return (\r\n    <>\r\n      <div className=\"header\">\r\n        <h1>ü§†ü§üüèª</h1>\r\n        <AddCategories setCategories={setCategories} />\r\n      </div>\r\n      {Categories.map((e) => (\r\n        <GifGrid category={e} key={e} />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}